--- bak/xmemory.h	2012-10-02 10:20:19.000000000 -0400
+++ include/xmemory.h	2012-10-02 10:21:50.000000000 -0400
@@ -138,7 +138,7 @@
     CallSite callsite;
     objectHeader * obj = getObjectHeader(ptr);
 
-    callsite.fetch(CALL_SITE_DEPTH);
+    callsite.fetch(2);
 
     // Check whether current callsite is the same as before. If it is
     // not the same, we have to cleanup all information about the old
@@ -156,16 +156,15 @@
       atomic::add(sz, (unsigned long *)&cleanupSize);
   #endif
       // Save the new callsite information.
-      memcpy((void *)((intptr_t)obj + obj->getCallsiteOffset()), &callsite, sizeof(CallSite));
+      obj->storeCallsite (callsite);
     } else if (!isProtected) {
       // Save callsite to object header.
-      memcpy((void *)((intptr_t)obj + obj->getCallsiteOffset()), &callsite, sizeof(CallSite));
+      obj->storeCallsite (callsite);
     }
   #ifdef GET_CHARACTERISTICS
     atomic::increment((unsigned long *)&allocTimes);
   #endif
   }
-  //fprintf(stderr, "xmemory malloc sz %d ptr %p\n", sz, ptr);
 #else
   if(sz <= xdefines::LARGE_CHUNK) 
     ptr = _bheap.malloc (_heapid, sz);
@@ -462,17 +461,14 @@
 
   inline void enableCheck() {
     atomic::atomic_set(&_doChecking, 1);
-   // fprintf(stderr, "%d: ENABLE checking\n", getpid());
   }
 
   inline void disableCheck() {
-   // fprintf(stderr, "%d: DISABLE checking\n", getpid());
     atomic::atomic_set(&_doChecking, 0);
   } 
 
   void doPeriodicChecking () {
     if(_doChecking == 1) {
-   //   fprintf(stderr, "Do periodicchecking with doChecking 1*******\n");
       stopCheckingTimer();
       _globals.periodicCheck();
       _bheap.periodicCheck();
@@ -519,8 +515,6 @@
 #ifdef DETECT_FALSE_SHARING
     xmemory::getInstance().disableCheck();
 #endif
-   // char string[256];
-
     void * addr = siginfo->si_addr; // address of access
 
     // Check if this was a SEGV that we are supposed to trap.
@@ -533,8 +527,6 @@
                 xdefines::PageSize,
                 PROT_READ | PROT_WRITE);
 
-     // sprintf(string, "%d: capture the memory access error at %p\n", getpid(), addr);
-  
     // It is a write operation. Handle that.
       xmemory::getInstance().handleWrite (addr);
     } else if (siginfo->si_code == SEGV_MAPERR) {
@@ -546,7 +538,6 @@
       ::abort();
     }
 
-    //write(1, string, strlen(string));
 #ifdef DETECT_FALSE_SHARING
     xmemory::getInstance().enableCheck();
 #endif
